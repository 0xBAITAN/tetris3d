#version 330 core

const int MAX_DIRECTIONAL_LIGHTS = 32;
const int MAX_POINT_LIGHTS = 32;
const int MAX_SPOT_LIGHTS = 32;

struct Material {
   
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;

  
};

struct Light {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct DirectionalLight {
    Light base;
    vec3 direction;
};

struct PointLight {
    Light base;
    vec3 pos;    
    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    PointLight p_base;
    vec3 direction;
    float cutoff;
    float outer_cutoff;
};

struct Shadow {
    float farPlane;
    samplerCube shadowCube;   
};

in vec3 fragment_pos;
in vec3 normals;
in vec2 tex_coords;



out vec4 fragment_color;

uniform Material material;
uniform float far_plane;

uniform DirectionalLight directionalLights[MAX_DIRECTIONAL_LIGHTS];
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];
uniform Shadow pointShadows[MAX_POINT_LIGHTS];

uniform int directionalLightsCount;
uniform int pointLightsCount;
uniform int spotLightsCount;


uniform vec3 view_pos;

uniform sampler2D shadow_map;

 uniform sampler2D texture_diffuse0;
   uniform sampler2D texture_specular0;

vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float CalculateShadows(vec4 frag_light_pos_space) {
    vec3 proj_coords = frag_light_pos_space.xyz / frag_light_pos_space.w;
    proj_coords = proj_coords * 0.5f + 0.5f;
    float closest_depth = texture(shadow_map, proj_coords.xy).z;
    float current_depth = proj_coords.z;
    float shadow = current_depth > closest_depth ? 1.0f : 0.0f;
  return closest_depth;
  //return proj_coords.y;

}

float CalculateShadows(vec3 light_pos, vec3 frag_pos, int index) {
vec3 light_to_frag = frag_pos - light_pos;
float closest_depth;
float current_depth = length(light_to_frag);
float viewDistance = length(view_pos - fragment_pos);
float bias = 0.05f;
float diskRadius = (1.0f+viewDistance/pointShadows[0].farPlane)/25.0f;
float shadow = 0.0f;
int samples = 20;
for (int i = 0; i<20; i++) {
    closest_depth = texture(pointShadows[0].shadowCube, light_to_frag + sampleOffsetDirections[i] * diskRadius).r;
    closest_depth*=pointShadows[0].farPlane;
    shadow+= current_depth - bias > closest_depth ? 1.0f : 0.0f;
}
return shadow / float(samples);

}

vec3 CalculateShadingResult(Light light, Material material, vec3 light_direction) { 
    vec3 ambient, diffuse, specular;
    vec3  norm = normalize(normals);  
    float diff = max(dot(norm, light_direction), 0.0f);
    vec3 view_direction = normalize(view_pos - fragment_pos);
    vec3 reflect_direction = reflect(-light_direction, norm);
    float spec = pow(max(dot(view_direction, reflect_direction), 0.0f), material.shininess);
  
   
    ambient = vec3(0.1f) * light.ambient * material.ambient * vec3(texture(texture_diffuse0, tex_coords));
    diffuse =  diff * light.diffuse * material.diffuse * vec3(texture(texture_diffuse0, tex_coords));
    specular = 0.5f * spec * light.specular * material.specular * vec3(texture(texture_specular0, tex_coords));
  return (ambient+diffuse+specular);      
}

vec3 CalculateShadingResult(DirectionalLight light, Material material) {
    vec3  light_direction = normalize(-light.direction);
    return CalculateShadingResult(light.base, material, light_direction);
}

vec3 CalculateShadingResult(PointLight light, Material material, int index) {
    vec3  light_direction = normalize(light.pos - fragment_pos);
    float distance = length(light.pos - fragment_pos);
    float attentuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * distance * distance);
  // float shadow = CalculateShadows(light.pos, fragment_pos, index);
    return CalculateShadingResult(light.base, material, light_direction) * attentuation;
}

vec3 CalculateShadingResult(SpotLight light, Material material) {
    vec3  spot_light_direction = normalize(-light.direction);
    vec3 light_direction = normalize(light.p_base.pos - fragment_pos);
    float theta = dot(light_direction, spot_light_direction);
    float epsilon = (light.cutoff - light.outer_cutoff); 
    float intensity = clamp((theta - light.outer_cutoff)/epsilon, 0.0f, 1.0f);
    return CalculateShadingResult(light.p_base, material, 0) * intensity;    
}

vec3 CalculateAllPointLights() {
    vec3 result = vec3(0.0f);
    for (int i = 0; i < pointLightsCount; i++) {
        result += CalculateShadingResult(pointLights[i], material, i);
    }
    return result;
}

void main() {
vec3 result = vec3(0.0f);
result += CalculateAllPointLights();
fragment_color = vec4(result, 1.0f); 
}